akka {
  # akka 引起的致命原因不关闭JVM
  jvm-exit-on-fatal-error = off
  log-config-on-start = on
  loglevel = "INFO"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
}

# 规则处理
engine-dispatcher {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
      # 最小并发线程数
      parallelism-min = 5
      # 最大并发线程数
      parallelism-max = 15
      # 并发因子，该值会影响线程池的最大可用线程数，具体的计算方式是： 最大线程数＝处理器个数＊parallelism-factor ,比如当服务器C PU 处理器个数是4 ， 并发因子是3 ，那么最大线程数就是1 2
      parallelism-factor = 0.25
  }
  # 对于一个Actor ，某个线程在（ 返回到线程池） 处理下一个Actor 之前能处理的最大消息数，假如设置为1，表示尽可能公平的处理消息
  throughput = 10
}

engine-mailbox
{
  mailbox-type = "akka.dispatch.NonBlockingBoundedMailbox"
  mailbox-capacity = 25000
}

# 执行节点
node-dispatcher {
  type = PinnedDispatcher
  executor = "thread-pool-executor"
  fork-join-executor {
      # 最小并发线程数
      parallelism-min = 2
      # 最大并发线程数
      parallelism-max = 12
      # 并发因子，该值会影响线程池的最大可用线程数，具体的计算方式是： 最大线程数＝处理器个数＊parallelism-factor ,比如当服务器C PU 处理器个数是4 ， 并发因子是3 ，那么最大线程数就是1 2
      parallelism-factor = 1.0
  }
  # How long time the dispatcher will wait for new actors until it shuts down
  shutdown-timeout = 1s

  # 对于一个Actor ，某个线程在（ 返回到线程池） 处理下一个Actor 之前能处理的最大消息数，假如设置为1，表示尽可能公平的处理消息
  throughput = 5
}